AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  GitHubOAuthToken:
    Type: String
    NoEcho: true
    Description: "GitHub OAuth Token for CodePipeline to access the repository"

Resources:
  # VPC & Subnets for ECS
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: wildrydes-cluster

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: wildrydes-repo

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: "ecs.amazonaws.com"
      Policies:
        - PolicyName: "ECSServicePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecs:UpdateService"
                  - "ecs:DescribeTasks"
                  - "ecs:ListTasks"
                Resource: "*"

  ECSFargateTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: wildrydes-task
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: wildrydes-app
          Image: !Sub "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/wildrydes-repo:latest"
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CodeBuildLogGroup
              awslogs-region: !Ref AWS_REGION
              awslogs-stream-prefix: "ecs"

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 2
      TaskDefinition: !Ref ECSFargateTaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetPublic1
            - !Ref SubnetPublic2
          SecurityGroups:
            - !Ref ECSSecurityGroup
      LoadBalancers:
        - TargetGroupArn: !Ref ALBTargetGroup
          ContainerName: wildrydes-app
          ContainerPort: 80

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: wildrydes-alb
      Subnets:
        - !Ref SubnetPublic1
        - !Ref SubnetPublic2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: wildrydes-target-group
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 200
            MessageBody: "Welcome to Wild Rydes!"
            ContentType: text/plain
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: wildrydes-build
      Source:
        Type: GITHUB
        Location: "https://github.com/your/repository"
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Ref CodeBuildLogGroup
          StreamName: !Sub "wildrydes-build-log"

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: "codebuild.amazonaws.com"
      Policies:
        - PolicyName: "CodeBuildPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecr:BatchGetImage"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:PutImage"
                Resource: "*"

  CodePipelineArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "wildrydes-pipeline-artifacts"

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: "your-github-owner"
                Repo: "wildrydes-app"
                Branch: "main"
                OAuthToken: !Ref GitHubOAuthToken
        - Name: Build
          Actions:
            - Name: CodeBuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
        - Name: Deploy
          Actions:
            - Name: ECSDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: "1"
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ClusterName: !Ref ECSCluster
                ServiceName: wildrydes-service

  CodeBuildLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/codebuild/wildrydes-build-logs"
      RetentionInDays: 7

  ECSFargateTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/ecs/wildrydes-app-task-logs"
      RetentionInDays: 7

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: "codepipeline.amazonaws.com"
      Policies:
        - PolicyName: "CodePipelinePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                  - "ecs:UpdateService"
                  - "ecs:DescribeServices"
                  - "ecs:ListTasks"
                Resource: "*"

  # SNS Topic for CloudWatch Alarm notifications
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "WildRydes-Build-Failure-Notification"
      TopicName: "wildrydes-build-failure-notifications"

  # CloudWatch Alarm for Build Failure
  CloudWatchAlarmForBuildFailure:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "CodeBuildFailureAlarm"
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      EvaluationPeriods: 1
      MetricName: "FailedBuilds"
      Namespace: "AWS/CodeBuild"
      Period: 60
      Statistic: "Sum"
      Threshold: 1
      AlarmActions:
        - Ref: SNSTopic

Outputs:
  ECSClusterName:
    Value: !Ref ECSCluster
    Description: "ECS Cluster Name"
  CodePipelineName:
    Value: !Ref CodePipeline
    Description: "CodePipeline Name"
